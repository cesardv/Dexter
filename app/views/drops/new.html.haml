.left-half.darker
  %h2 Hello
  hello, there will be some content here
.right-half
  %h2.highlight-color make a new drop...
  .drop-zone
    = simple_form_for @drop, :url => drops_path, :html => {:id => 'form-id'} do |f|
      %input{:type => 'hidden', :name => 'js-upload', :value => false, :id => 'js-upload'}
      = image_tag '1.png', :width => 30, :class => 'number'
      = f.input :type, :as => :select, :collection => Drop::TYPES, :wrapper_html => {:class => 'field'}, :label => 'type of drop', :include_blank => false, :input_html => {:id => 'type'}
      .clr
      = image_tag '2.png', :width => 30, :class => 'number'
      = f.input :id, :wrapper_html => {:class => 'field', :id => 'id-wrapper'}, :label => 'http://dexter.io/'
      .clr

      .redirect-section
        = image_tag '3.png', :width => 30, :class => 'number'
        = f.input :redirect_url, :wrapper_html => {:class => 'field', :id => 'redirect_url-wrapper'}, :label => 'redirect to: '
        .clr

      .upload-section.hidden
        = image_tag '3.png', :width => 30, :class => 'number'
        = f.input :file, :as => :file, :wrapper_html => {:class => 'field', :id => 'file-wrapper'}, :label => 'file to upload', :input_html => {:class => 'uploadWidget', :id => 'file-id'}
        .clr
      = f.submit 'Create', :id => 'submit', :class => 'button'
      .clr
      .meter.blue{:style => 'visibility:hidden;margin:15px;'}
        %span#progress-bar
 
        .clr
        

       


:css
  .left-half {
    font-family:Colaborate;
  }
  @media only screen and (max-width: 900px){
    .right-half {
      width:95%;
    }
    .left-half {
      display:none;
    }

  }
:javascript

    $(function() {
  // Function that will allow us to know if Ajax uploads are supported
  function supportAjaxUploadWithProgress() {
    return supportFileAPI() && supportAjaxUploadProgressEvents() && supportFormData();

    // Is the File API supported?
    function supportFileAPI() {
      var fi = document.createElement('INPUT');
      fi.type = 'file';
      return 'files' in fi;
    };

    // Are progress events supported?
    function supportAjaxUploadProgressEvents() {
      var xhr = new XMLHttpRequest();
      return !! (xhr && ('upload' in xhr) && ('onprogress' in xhr.upload));
    };

    // Is FormData supported?
    function supportFormData() {
      return !! window.FormData;
    }
  }

  // Actually confirm support
  if (supportAjaxUploadWithProgress()) {
    // Ajax uploads are supported!
    // Change the support message and enable the upload button
    //var uploadBtn = document.getElementById('upload-button-id');
    //uploadBtn.removeAttribute('disabled');

    // Init the Ajax form submission
    initFullFormAjaxUpload();

  }

  function initFullFormAjaxUpload() {
    var form = document.getElementById('form-id');
    form.onsubmit = function() {
      $('#js-upload').val(true);

      // FormData receives the whole form
      var formData = new FormData(form);

      // We send the data where the form wanted
      var action = form.getAttribute('action');

      // Code common to both variants
      sendXHRequest(formData, action);

      // Avoid normal form submission
      return false;
    }
  }

  // Once the FormData instance is ready and we know
  // where to send the data, the code is the same
  // for both variants of this technique
  function sendXHRequest(formData, uri) {
    // Get an XMLHttpRequest instance
    var xhr = new XMLHttpRequest();

    // Set up events
    xhr.upload.addEventListener('progress', onprogressHandler, false);
    xhr.addEventListener('readystatechange', onreadystatechangeHandler, false);

    // Set up request
    xhr.open('POST', uri, true);

    // Fire!
    xhr.send(formData);
  }

  // Handle the progress
  function onprogressHandler(evt) {
    var percent = Math.floor(evt.loaded/evt.total*100);
    $('#progress-bar').attr('style', 'width:' + percent + '%;');
    $('.meter').attr('style', '');
  }

  // Handle the response from the server
  function onreadystatechangeHandler(evt) {
    var status = null;

    try {
      status = evt.target.status;
    }
    catch(e) {
      return;
    }

    if (status == '200' && evt.target.responseText) {
      window.location = $.parseJSON(evt.target.response).url;
    }
    else {
      var parsed = $.parseJSON(evt.target.responseText);
      if( ! parsed) {
        return;
      }
      var errors = parsed.errors;
      
      $('.meter').attr("style", "visibility:hidden");
      $.each(errors, function(key, value) {
        if($('#' + key + "-wrapper.field_with_errors").size() > 0) {
          return;
        }

        $("#" + key + "-wrapper").addClass('field_with_errors').append("<div class=\"error\">" + value + "</div>");
        $('#submit').show();
      });
    }
  }



  $('form').submit(function() {
  $('.field_with_errors').removeClass('field_with_errors')
  $('.error').remove();
  $('#submit').hide();
  });

  });
