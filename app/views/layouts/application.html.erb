<!DOCTYPE html>
<html>
<head>
  <title>Dexter</title>
  <%= stylesheet_link_tag    "application", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>
<body>

  <%= link_to image_tag('logo.png', :height => 125, :class => 'logo', :border => 0), root_url  %>

  <div class="wrapper">
    <%= yield %>
  </div>


  <script>
  $(function() {
// Function that will allow us to know if Ajax uploads are supported
function supportAjaxUploadWithProgress() {
  return supportFileAPI() && supportAjaxUploadProgressEvents() && supportFormData();

  // Is the File API supported?
  function supportFileAPI() {
    var fi = document.createElement('INPUT');
    fi.type = 'file';
    return 'files' in fi;
  };

  // Are progress events supported?
  function supportAjaxUploadProgressEvents() {
    var xhr = new XMLHttpRequest();
    return !! (xhr && ('upload' in xhr) && ('onprogress' in xhr.upload));
  };

  // Is FormData supported?
  function supportFormData() {
    return !! window.FormData;
  }
}

// Actually confirm support
if (supportAjaxUploadWithProgress()) {
  // Ajax uploads are supported!
  // Change the support message and enable the upload button
  //var uploadBtn = document.getElementById('upload-button-id');
  //uploadBtn.removeAttribute('disabled');

  // Init the Ajax form submission
  initFullFormAjaxUpload();

}

function initFullFormAjaxUpload() {
  var form = document.getElementById('form-id');
  form.onsubmit = function() {
    $('#js-upload').val(true);

    // FormData receives the whole form
    var formData = new FormData(form);

    // We send the data where the form wanted
    var action = form.getAttribute('action');

    // Code common to both variants
    sendXHRequest(formData, action);

    // Avoid normal form submission
    return false;
  }
}

// Once the FormData instance is ready and we know
// where to send the data, the code is the same
// for both variants of this technique
function sendXHRequest(formData, uri) {
  // Get an XMLHttpRequest instance
  var xhr = new XMLHttpRequest();

  // Set up events
  xhr.upload.addEventListener('loadstart', onloadstartHandler, false);
  xhr.upload.addEventListener('progress', onprogressHandler, false);
  xhr.upload.addEventListener('load', onloadHandler, false);
  xhr.addEventListener('readystatechange', onreadystatechangeHandler, false);

  // Set up request
  xhr.open('POST', uri, true);

  // Fire!
  xhr.send(formData);
}

// Handle the start of the transmission
function onloadstartHandler(evt) {
  var div = document.getElementById('upload-status');
  div.innerHTML = 'Upload started!';
}

// Handle the end of the transmission
function onloadHandler(evt) {
  var div = document.getElementById('upload-status');
  div.innerHTML = 'Upload successful!';
}

// Handle the progress
function onprogressHandler(evt) {
  var div = document.getElementById('progress');
  var percent = evt.loaded/evt.total*100;
  div.innerHTML = 'Progress: ' + percent + '%';
}

// Handle the response from the server
function onreadystatechangeHandler(evt) {
  var status = null;

  try {
    status = evt.target.status;
  }
  catch(e) {
    return;
  }

  if (status == '200' && evt.target.responseText) {
    window.location = $.parseJSON(evt.target.response).url;
  }
  else {
    var parsed = $.parseJSON(evt.target.responseText);
    if( ! parsed) {
      return;
    }
    var errors = parsed.errors;
    
    $.each(errors, function(key, value) {
      if($('#' + key + "-wrapper.field_with_errors").size() > 0) {
        return;
      }

      $("#" + key + "-wrapper").addClass('field_with_errors').append("<div class=\"error\">" + value + "</div>");
    });
  }
}



$('form').submit(function() {
$('.field_with_errors').removeClass('field_with_errors')
$('.error').remove();
});

});
  </script>

  <!-- Placeholders for messages set by event handlers -->
  <p id="upload-status"></p>
  <p id="progress"></p>

</form>
  
</body>
</html>
